cmake_minimum_required(VERSION 3.9 FATAL_ERROR)

project(roottest)

# Treat ROOT as a dependency for roottest.git
find_package(ROOT REQUIRED CONFIG)

# Deprecation of directly using ROOTSYS for roottest.git
if(DEFINED ENV{ROOTSYS})
  message(STATUS "Using directly ROOTSYS for roottest.git is under deprecation, please add ROOT in PATH.")
endif()

# If ROOT_SOURCE_DIR is set, roottest is built as part of the root build.
# If ROOT_SOURCE_DIR is not set, search for an installation.
if(DEFINED ROOT_SOURCE_DIR)
  # root-config --prefix helps to retrieve ROOTSYS env variable.
  # ROOT_BINARY_DIR is set by ROOTConfig.cmake
  find_program(ROOT_CONFIG_EXECUTABLE root-config PATHS ${ROOT_BINARY_DIR})
  if(NOT ROOT_CONFIG_EXECUTABLE)
    message(ERROR "root-config is not found, please rerun configuration step.")
  endif()
  exec_program(${ROOT_CONFIG_EXECUTABLE} ARGS "--prefix" OUTPUT_VARIABLE ROOTSYS RETURN_VALUE RETVAR)
  set(ROOTSYS ${ROOTSYS} CACHE INTERNAL "")
  set(ROOT_LIBRARIES Core RIO Net Hist Gpad Tree Rint Matrix MathCore)
  set(ROOT_root_CMD ${ROOTSYS}/bin/root.exe)
  set(ROOT_hadd_CMD ${ROOTSYS}/bin/hadd)
  set(ROOT_genreflex_CMD ${ROOTSYS}/bin/genreflex)
  set(ROOT_rootcint_CMD ${ROOTSYS}/bin/rootcint)
  set(ROOT_rootcling_CMD rootcling)
else() # standalone roottest.git
  include(${ROOT_USE_FILE})
  # root-config --prefix helps to retrieve ROOTSYS env variable.
  find_program(ROOT_CONFIG_EXECUTABLE root-config)
  exec_program(${ROOT_CONFIG_EXECUTABLE} ARGS "--prefix" OUTPUT_VARIABLE ROOTSYS RETURN_VALUE RETVAR)
  set(ROOTSYS ${ROOTSYS} CACHE INTERNAL "")
  # Some roottest.git tests are checking LZ4, which has different references depends on its version.
  # We recover LZ4 version used in ROOT, stored in root-config --config output.
  exec_program(${ROOT_CONFIG_EXECUTABLE} ARGS "--srcdir" OUTPUT_VARIABLE ROOT_SOURCE_DIR)
  exec_program(${ROOT_CONFIG_EXECUTABLE} ARGS "--config" OUTPUT_VARIABLE ROOT_CONFIG_VARIABLES RETURN_VALUE RETVAR)
  separate_arguments(ROOT_CONFIG_VARIABLES)
  foreach(item ${ROOT_CONFIG_VARIABLES})
    if("${item}" MATCHES "LZ4_VERSION=(.*)")
      string(REGEX REPLACE "LZ4_VERSION=(.*)" "\\1" LZ4 ${item})
      set(LZ4_VERSION ${LZ4} CACHE INTERNAL "")
    endif()
  endforeach()
  # If we didn't manage to find LZ4_VERSION in "root-config --config" output,
  # we consider that ROOT had used system LZ4 and we can find it via find_package().
  set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${ROOTSYS}/cmake/modules ${ROOT_SOURCE_DIR}/cmake/modules)
  if(NOT LZ4_VERSION)
    find_package(LZ4)
  endif()
  # To be able to use the same C++ standard as used in ROOT, we can try to retrieve it from root-config --features
  exec_program(root-config ARGS "--features" OUTPUT_VARIABLE ROOT_FEATURES RETURN_VALUE RETVAR)
  separate_arguments(ROOT_FEATURES)
  foreach(item ${ROOT_FEATURES})
    if("${item}" MATCHES "cxx(.*)")
      string(REGEX REPLACE "cxx(.*)" "\\1" CXX_VERSION ${item})
      set(CMAKE_CXX_STANDARD ${CXX_VERSION} CACHE INTERNAL "")
    endif()
  endforeach()
  find_program(ROOT_root_CMD root.exe PATHS ${ROOTSYS}/bin)
  find_program(ROOT_hadd_CMD hadd PATHS ${ROOTSYS}/bin)
  find_program(ROOT_genreflex_CMD genreflex PATHS ${ROOTSYS}/bin)
  find_program(ROOT_rootcint_CMD rootcint PATHS ${ROOTSYS}/bin)
  find_program(ROOT_rootcling_CMD rootcling PATHS ${ROOTSYS}/bin)
  include(RootNewMacros)
  enable_testing()
endif()

# Synchronizing default compression algorithm used for ROOT.
# We need to have it for CMake settings for switching tests references.
# FIXME: it should be exported from ROOT build.
set(compression_default "zlib" CACHE STRING "" FORCE)

get_filename_component(ROOT_BINARY_DIR  "${ROOTSYS}/bin" ABSOLUTE)
get_filename_component(ROOT_LIBRARY_DIR "${ROOTSYS}/lib" ABSOLUTE)

# Detect bitness.
if(CMAKE_SYSTEM_PROCESSOR MATCHES amd64.*|x86_64.*|aarch64.*|ppc64.*
   OR (CMAKE_VERSION VERSION_LESS 3.0 AND CMAKE_SYSTEM_NAME STREQUAL Darwin) )
  set(64BIT 1)
  message("-- Check for bitness: Found 64 bit architecture.")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES i686.*|i386.*|x86.*)
  set(32BIT 1)
  message("-- Check for bitness: Found 32 bit architecture.")
endif()

# Setup environment.
set(ROOTTEST_ENV_PATH ${ROOT_BINARY_DIR})
set(ROOTTEST_ENV_PYTHONPATH ${ROOT_LIBRARY_DIR})
set(ROOTTEST_ENV_LIBRARYPATH ${ROOT_LIBRARY_DIR})
set(ROOTTEST_ENV_EXTRA)

set(ROOTTEST_ENVIRONMENT
    ROOTSYS=${ROOTSYS}
    PATH=${ROOTTEST_ENV_PATH}:$ENV{PATH}
    PYTHONPATH=${ROOTTEST_ENV_PYTHONPATH}:$ENV{PYTHONPATH}
    ${ld_library_path}=${ROOTTEST_ENV_LIBRARYPATH}:$ENV{${ld_library_path}})
if (gnuinstall)
  set(ROOTTEST_ENVIRONMENT ${ROOTTEST_ENVIRONMENT} ROOTIGNOREPREFIX=1)
endif()

# Resolve symbolic links for the ROOTTEST_DIR variable.
get_filename_component(ROOTTEST_DIR ${CMAKE_CURRENT_SOURCE_DIR} ABSOLUTE)

# Set some variables that customizes the behaviour of the ROOT macros
set(CMAKE_ROOTTEST_DICT ON)

# Set the CMake module path. Here are all the custom CMake modules.
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${ROOTTEST_DIR}/cmake/modules")

# Find python.
if(ROOT_python_FOUND)
  find_package(PythonInterp)
  if(PYTHONINTERP_FOUND)
    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "import sys;sys.stdout.write(sys.prefix)"
                    OUTPUT_VARIABLE PYTHON_PREFIX)
    set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${PYTHON_PREFIX})
  endif()
  find_package(PythonLibs)
endif()

#---Set flag for PyROOT tests that are expected to fail in experimental
if(ROOT_pyroot_experimental_FOUND)
  set(PYTESTS_WILLFAIL WILLFAIL)
endif()

# Find OpenGL
find_library(OPENGL_gl_LIBRARY NAMES GL)

# Setup standard includes / links.
include_directories(${ROOT_INCLUDE_DIRS} ${ROOT_INCLUDE_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
link_directories(${ROOT_LIBRARY_DIR})
set(CMAKE_MACOSX_RPATH TRUE)              # use RPATH for MacOSX

# Enable and setup CTest.
include(RoottestCTest)
include(RootCTestMacros)

include(SearchInstalledSoftwareRoottest)

message("-- Scanning subdirectories for tests...")
ROOTTEST_ADD_TESTDIRS()
